{"ast":null,"code":"import _slicedToArray from \"/home/chandra/Desktop/useless/projects/reacthooks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/chandra/Desktop/useless/projects/reacthooks/src/Hooks-App/Playground.js\";\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport randomColor from 'randomcolor';\nexport default function Playground() {\n  const _useState = useState(30),\n        _useState2 = _slicedToArray(_useState, 2),\n        count = _useState2[0],\n        setCount = _useState2[1];\n\n  const inputRef = useRef();\n\n  const _useState3 = useState(randomColor()),\n        _useState4 = _slicedToArray(_useState3, 2),\n        color = _useState4[0],\n        setColor = _useState4[1];\n\n  useEffect(() => inputRef.current.focus(), [count]);\n  const cb = useCallback(num => console.log(num), [count]);\n  return React.createElement(\"div\", {\n    style: {\n      borderTop: \"10px solid \".concat(color)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, count, React.createElement(\"button\", {\n    onClick: () => setCount(currentCount => currentCount - 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"-\"), React.createElement(\"button\", {\n    onClick: () => setCount(currentCount => currentCount + 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"+\"), React.createElement(\"button\", {\n    onClick: () => setColor(randomColor()),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \"Change Color\"), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    ref: inputRef,\n    type: \"range\",\n    onChange: e => setCount(e.target.value),\n    value: count,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }), React.createElement(Calculate, {\n    cb: cb,\n    num: count,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }));\n}\nconst Calculate = React.memo(({\n  cb,\n  num\n}) => {\n  cb(num);\n  const renderCount = useRef(1);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, renderCount.current++);\n});","map":{"version":3,"sources":["/home/chandra/Desktop/useless/projects/reacthooks/src/Hooks-App/Playground.js"],"names":["React","useState","useEffect","useRef","useCallback","useMemo","randomColor","Playground","count","setCount","inputRef","color","setColor","current","focus","cb","num","console","log","borderTop","currentCount","e","target","value","Calculate","memo","renderCount"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,EAA6CC,WAA7C,EAA0DC,OAA1D,QAAyE,OAAzE;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,eAAe,SAASC,UAAT,GAAsB;AAAA,oBACTN,QAAQ,CAAC,EAAD,CADC;AAAA;AAAA,QAC5BO,KAD4B;AAAA,QACrBC,QADqB;;AAGnC,QAAMC,QAAQ,GAAGP,MAAM,EAAvB;;AAHmC,qBAKTF,QAAQ,CAACK,WAAW,EAAZ,CALC;AAAA;AAAA,QAK5BK,KAL4B;AAAA,QAKrBC,QALqB;;AAMnCV,EAAAA,SAAS,CAAC,MAAMQ,QAAQ,CAACG,OAAT,CAAiBC,KAAjB,EAAP,EAAiC,CAACN,KAAD,CAAjC,CAAT;AAEA,QAAMO,EAAE,GAAGX,WAAW,CAACY,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAR,EAA0B,CAACR,KAAD,CAA1B,CAAtB;AAEA,SACE;AAAK,IAAA,KAAK,EAAE;AAAEW,MAAAA,SAAS,uBAAgBR,KAAhB;AAAX,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,KADH,EAEE;AAAQ,IAAA,OAAO,EAAE,MAAMC,QAAQ,CAACW,YAAY,IAAIA,YAAY,GAAG,CAAhC,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,EAGE;AAAQ,IAAA,OAAO,EAAE,MAAMX,QAAQ,CAACW,YAAY,IAAIA,YAAY,GAAG,CAAhC,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHF,EAIE;AAAQ,IAAA,OAAO,EAAE,MAAMR,QAAQ,CAACN,WAAW,EAAZ,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAME;AAAO,IAAA,GAAG,EAAEI,QAAZ;AAAsB,IAAA,IAAI,EAAC,OAA3B;AAAmC,IAAA,QAAQ,EAAEW,CAAC,IAAIZ,QAAQ,CAACY,CAAC,CAACC,MAAF,CAASC,KAAV,CAA1D;AAA4E,IAAA,KAAK,EAAEf,KAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAOE,oBAAC,SAAD;AAAW,IAAA,EAAE,EAAEO,EAAf;AAAmB,IAAA,GAAG,EAAEP,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF;AAWD;AAED,MAAMgB,SAAS,GAAGxB,KAAK,CAACyB,IAAN,CAAW,CAAC;AAAEV,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAAD,KAAiB;AAC5CD,EAAAA,EAAE,CAACC,GAAD,CAAF;AACA,QAAMU,WAAW,GAAGvB,MAAM,CAAC,CAAD,CAA1B;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMuB,WAAW,CAACb,OAAZ,EAAN,CAAP;AACD,CAJiB,CAAlB","sourcesContent":["import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react'\nimport randomColor from 'randomcolor'\n\nexport default function Playground() {\n  const [count, setCount] = useState(30)\n  \n  const inputRef = useRef()\n  \n  const [color, setColor] = useState(randomColor())\n  useEffect(() => inputRef.current.focus(), [count])\n  \n  const cb = useCallback(num => console.log(num), [count])\n  \n  return (\n    <div style={{ borderTop: `10px solid ${color}`}}>\n      {count}\n      <button onClick={() => setCount(currentCount => currentCount - 1)}>-</button>\n      <button onClick={() => setCount(currentCount => currentCount + 1)}>+</button>\n      <button onClick={() => setColor(randomColor())}>Change Color</button>\n      <hr />\n      <input ref={inputRef} type=\"range\" onChange={e => setCount(e.target.value)} value={count} />\n      <Calculate cb={cb} num={count} />\n    </div>\n  )\n}\n\nconst Calculate = React.memo(({ cb, num }) => {\n  cb(num)\n  const renderCount = useRef(1)\n  return <div>{renderCount.current++}</div>\n})"]},"metadata":{},"sourceType":"module"}