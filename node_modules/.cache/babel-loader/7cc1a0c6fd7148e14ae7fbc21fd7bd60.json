{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SaturationSpectrum = exports.HueSpectrum = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _objectAssign = require('object-assign');\n\nvar _objectAssign2 = _interopRequireDefault(_objectAssign);\n\nvar _reactClass = require('react-class');\n\nvar _HueSpectrum = require('./HueSpectrum');\n\nvar _HueSpectrum2 = _interopRequireDefault(_HueSpectrum);\n\nvar _SaturationSpectrum = require('./SaturationSpectrum');\n\nvar _SaturationSpectrum2 = _interopRequireDefault(_SaturationSpectrum);\n\nvar _color = require('./utils/color');\n\nvar _toStringValue2 = require('./utils/toStringValue');\n\nvar _toStringValue3 = _interopRequireDefault(_toStringValue2);\n\nvar _defaultColor = require('./defaultColor');\n\nvar _defaultColor2 = _interopRequireDefault(_defaultColor);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar emptyFn = function emptyFn() {};\n\nvar ColorPicker = function (_Component) {\n  _inherits(ColorPicker, _Component);\n\n  function ColorPicker(props) {\n    _classCallCheck(this, ColorPicker);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ColorPicker).call(this, props));\n\n    (0, _reactClass.autoBind)(_this);\n    _this.state = {\n      value: _this.props.defaultValue\n    };\n    return _this;\n  }\n\n  _createClass(ColorPicker, [{\n    key: 'prepareClassName',\n    value: function prepareClassName(props) {\n      var className = props.className || '';\n      return className + ' cp react-color-picker';\n    }\n  }, {\n    key: 'prepareProps',\n    value: function prepareProps(props) {\n      props.className = this.prepareClassName(props);\n      return props;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var props = this.props;\n      var className = this.prepareClassName(props);\n      var hueStyle = (0, _objectAssign2.default)({}, this.props.hueStyle) || {};\n      hueStyle.marginLeft = this.props.hueMargin;\n      var value = props.value ? this.toColorValue(this.props.value) : null;\n      var defaultValue = !value ? this.toColorValue(this.state.value || props.defaultValue || props.defaultColor) : null;\n      var children = props.children;\n      var hueSpectrumProps = null;\n      var saturationSpectrumProps = null;\n\n      if (children) {\n        children = _react2.default.Children.toArray(children).forEach(function (child) {\n          if (child && child.props) {\n            if (child.props.isHueSpectrum) {\n              hueSpectrumProps = (0, _objectAssign2.default)({}, child.props);\n            }\n\n            if (child.props.isSaturationSpectrum) {\n              saturationSpectrumProps = (0, _objectAssign2.default)({}, child.props);\n            }\n          }\n        });\n      }\n\n      var saturationConfig = (0, _objectAssign2.default)({\n        onDrag: this.handleSaturationDrag,\n        onChange: this.handleSaturationChange,\n        onMouseDown: this.handleSaturationMouseDown\n      }, saturationSpectrumProps);\n\n      if (saturationConfig.width === undefined) {\n        saturationConfig.width = props.saturationWidth;\n      }\n\n      if (saturationConfig.height === undefined) {\n        saturationConfig.height = props.saturationHeight;\n      }\n\n      saturationConfig.inPicker = true;\n      var hueConfig = (0, _objectAssign2.default)({\n        onDrag: this.handleHueDrag,\n        onChange: this.handleHueChange,\n        onMouseDown: this.handleHueMouseDown,\n        style: hueStyle\n      }, hueSpectrumProps);\n\n      if (hueConfig.width === undefined) {\n        hueConfig.width = props.hueWidth;\n      }\n\n      if (hueConfig.height === undefined) {\n        hueConfig.height = props.hueHeight || props.saturationHeight;\n      }\n\n      hueConfig.inPicker = true;\n\n      if (this.state.dragHue) {\n        ;\n        (value || defaultValue).h = this.state.dragHue;\n      } //both value and defaultValue are objects like: {h,s,v}\n\n\n      if (value) {\n        saturationConfig.value = (0, _objectAssign2.default)({}, value);\n        hueConfig.value = (0, _objectAssign2.default)({}, value);\n      } else {\n        saturationConfig.defaultValue = (0, _objectAssign2.default)({}, defaultValue);\n        hueConfig.defaultValue = (0, _objectAssign2.default)({}, defaultValue);\n      }\n\n      var divProps = (0, _objectAssign2.default)({}, props);\n      delete divProps.color;\n      delete divProps.defaultColor;\n      delete divProps.defaultValue;\n      delete divProps.hueHeight;\n      delete divProps.hueMargin;\n      delete divProps.hueWidth;\n      delete divProps.saturationHeight;\n      delete divProps.saturationWidth;\n      delete divProps.value;\n      return _react2.default.createElement('div', _extends({}, divProps, {\n        className: className\n      }), _react2.default.createElement(_SaturationSpectrum2.default, saturationConfig), _react2.default.createElement(_HueSpectrum2.default, hueConfig));\n    }\n  }, {\n    key: 'toColorValue',\n    value: function toColorValue(value) {\n      return typeof value == 'string' ? (0, _color.toHsv)(value) : value;\n    }\n  }, {\n    key: 'toStringValue',\n    value: function toStringValue() {\n      return _toStringValue3.default.apply(undefined, arguments);\n    }\n  }, {\n    key: 'handleChange',\n    value: function handleChange(color) {\n      this.state.dragHue = null;\n      color = (0, _objectAssign2.default)({}, color);\n      var value = this.toStringValue(color);\n      this.props.onChange(value, color);\n    }\n  }, {\n    key: 'handleSaturationChange',\n    value: function handleSaturationChange(color) {\n      this.handleChange(color);\n    }\n  }, {\n    key: 'handleHueChange',\n    value: function handleHueChange(color) {\n      this.handleChange(color);\n    }\n  }, {\n    key: 'handleHueDrag',\n    value: function handleHueDrag(hsv) {\n      this.setState({\n        dragHue: hsv.h\n      });\n      this.handleDrag(hsv);\n    }\n  }, {\n    key: 'handleSaturationDrag',\n    value: function handleSaturationDrag(hsv) {\n      this.handleDrag(hsv);\n    }\n  }, {\n    key: 'handleDrag',\n    value: function handleDrag(color) {\n      if (!this.props.value) {\n        this.setState({\n          value: color\n        });\n      }\n\n      this.props.onDrag(this.toStringValue(color), color);\n    }\n  }, {\n    key: 'handleHueMouseDown',\n    value: function handleHueMouseDown(hsv) {\n      this.setState({\n        dragHue: hsv.h\n      });\n    }\n  }, {\n    key: 'handleSaturationMouseDown',\n    value: function handleSaturationMouseDown(hsv) {\n      this.setState({\n        dragHue: hsv.h\n      });\n    }\n  }]);\n\n  return ColorPicker;\n}(_react.Component);\n\nColorPicker.defaultProps = {\n  onDrag: emptyFn,\n  onChange: emptyFn,\n  defaultColor: _defaultColor2.default,\n  hueHeight: null,\n  hueMargin: 10,\n  hueWidth: 30,\n  saturationWidth: 300,\n  saturationHeight: 300\n};\nexports.HueSpectrum = _HueSpectrum2.default;\nexports.SaturationSpectrum = _SaturationSpectrum2.default;\nexports.default = ColorPicker;","map":null,"metadata":{},"sourceType":"script"}