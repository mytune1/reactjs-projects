{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar React = require('react');\n\nvar autoBind = require('../autoBind');\n\nvar ReactClass = function (_React$Component) {\n  _inherits(ReactClass, _React$Component);\n\n  function ReactClass(props) {\n    _classCallCheck(this, ReactClass);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ReactClass).call(this, props));\n\n    autoBind(_this);\n    return _this;\n  }\n\n  return ReactClass;\n}(React.Component);\n\nexports.default = ReactClass;\nexports.autoBind = autoBind;\nexports.Component = ReactClass;","map":null,"metadata":{},"sourceType":"script"}